# Generated by jeweler
# DO NOT EDIT THIS FILE DIRECTLY
# Instead, edit Jeweler::Tasks in Rakefile, and run 'rake gemspec'
# -*- encoding: utf-8 -*-

Gem::Specification.new do |s|
  s.name = %q{parcel}
  s.version = "0.5.0"

  s.required_rubygems_version = Gem::Requirement.new(">= 0") if s.respond_to? :required_rubygems_version=
  s.authors = ["Sean St. Quentin"]
  s.date = %q{2011-11-23}
  s.description = %q{Parcel is a simple library which allows normal ruby classes to maintain a linked
    file stored pretty much anywhere. Parcel abstracts away all the nasty details of storage and manipulation by
    presenting Interfaces to manupulate data, and Storages to store the data.

    Built-in interfaces include Zip Files and Images.
    Built-in storage methods include Hard Disk, S3, and Warehousing.

    Interfaces and Storage methods are easily extensible. See the github page for more information!}
  s.email = %q{sean.stquentin@gmail.com}
  s.extra_rdoc_files = [
    "README.markdown"
  ]
  s.files = [
    "README.markdown",
    "VERSION",
    "lib/parcel.rb",
    "lib/parcel/default_setup.rb",
    "lib/parcel/dsl/active_record.rb",
    "lib/parcel/dsl/core.rb",
    "lib/parcel/interfaces/base.rb",
    "lib/parcel/interfaces/r_magick_interface.rb",
    "lib/parcel/interfaces/scratch_space_base.rb",
    "lib/parcel/interfaces/zip_file_interface.rb",
    "lib/parcel/proxy.rb",
    "lib/parcel/registrations.rb",
    "lib/parcel/scratch_area.rb",
    "lib/parcel/storage/aws_s3_storage.rb",
    "lib/parcel/storage/base.rb",
    "lib/parcel/storage/local_storage.rb",
    "lib/parcel/storage/warehouse_storage.rb",
    "parcel.gemspec"
  ]
  s.homepage = %q{http://github.com/elseano/parcel}
  s.require_paths = ["lib"]
  s.rubygems_version = %q{1.3.7}
  s.summary = %q{Simply cool attachments}

  if s.respond_to? :specification_version then
    current_version = Gem::Specification::CURRENT_SPECIFICATION_VERSION
    s.specification_version = 3

    if Gem::Version.new(Gem::VERSION) >= Gem::Version.new('1.2.0') then
    else
    end
  else
  end
end

